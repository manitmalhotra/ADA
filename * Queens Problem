N=17
board=[[0]*N for _ in range(N)]

def solution(board):
    for row in board:
        print(' '.join('Q' if x else '.' for x in row))

def is_safe(board, row, col):
    #column on the left
    for i in range(col):
        if board[row][i]==1:
            return False
    
    # upper diagonal left
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]==1:
            return False
    
    # lower diagonal left
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j]==1:
            return False
    
    
    return True

def solve_nq_util(board, col):
   
    if col >= N:
        return True
        
    for i in range(N):
        if is_safe(board, i, col):
            board[i][col] = 1
            if solve_nq_util(board, col + 1) == True:
                return True
            #backtrack
            board[i][col] = 0
    return False
    
    
if not solve_nq_util(board, 0):
        print("Solution does not exist")
solution(board)
